/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package falconchat_client;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author kingj
 */
public class MainForm extends javax.swing.JFrame {

    static Socket s;
    static BufferedReader br;
    static BufferedWriter bw;
    static String username;
    static int portnumber;
    static ArrayList<String> messages = new ArrayList();
    public static ArrayList<String> friends = new ArrayList();
    public static DefaultListModel friendsModel = new DefaultListModel();
    
    public MainForm(String username, int portnumber) {
        initComponents();
        jOpenContactForm.setOpaque(false);
        jOpenContactForm.setContentAreaFilled(false);
        jOpenContactForm.setBorderPainted(false);
        jSend.setOpaque(false);
        jSend.setContentAreaFilled(false);
        jSend.setBorderPainted(false);
        jLogout.setOpaque(false);
        jLogout.setContentAreaFilled(false);
        jLogout.setBorderPainted(false);
        this.username = username;
        this.portnumber = portnumber;
        
        // set friends list
        try {
            File friendsFile = new File("db/friends_" + username);
            friendsFile.createNewFile();
            FileInputStream f = new FileInputStream(friendsFile);
            ObjectInputStream o = new ObjectInputStream(f);
            friends = (ArrayList<String>) o.readObject();
            for (int i = 0; i < friends.size(); ++i) {
                friendsModel.add(i, friends.get(i));
            }
            jList1.setModel(friendsModel);
            o.close();
            f.close();
        } catch (EOFException eof) {
            System.out.println("EOF exception occur");
        } catch (Exception e) {
            e.printStackTrace();
        }
         
        try
        {
            File chatFile = new File("db/chat_" + username);
            chatFile.createNewFile();
            FileInputStream f = new FileInputStream(chatFile);
            ObjectInputStream o = new ObjectInputStream(f);
            messages = (ArrayList<String>) o.readObject();
            o.close();
            f.close();
        } catch (EOFException eof) {
            System.out.println("EOF exception occur");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jFriend = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLogout = new javax.swing.JButton();
        jSend = new javax.swing.JButton();
        jOpenContactForm = new javax.swing.JButton();
        jUsername = new javax.swing.JLabel();
        jchattingwith = new javax.swing.JLabel();
        background = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FalconChat Client");
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane1.setBackground(new java.awt.Color(159, 150, 150));
        jScrollPane1.setForeground(new java.awt.Color(255, 255, 255));

        jList1.setBackground(new java.awt.Color(159, 150, 150));
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jList1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(18, 197, 160, 408));

        jTextArea1.setEditable(false);
        jTextArea1.setBackground(new java.awt.Color(182, 182, 182));
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane2.setViewportView(jTextArea1);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 90, 820, 570));

        jFriend.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jFriend, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 30, 140, 20));

        jTextField1.setBackground(new java.awt.Color(122, 122, 122));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 673, 684, 35));

        jLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLogoutActionPerformed(evt);
            }
        });
        getContentPane().add(jLogout, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 670, 160, 40));

        jSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSendActionPerformed(evt);
            }
        });
        getContentPane().add(jSend, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 670, 90, 40));

        jOpenContactForm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenContactFormActionPerformed(evt);
            }
        });
        getContentPane().add(jOpenContactForm, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 130, 160, 30));

        jUsername.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jUsername, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 640, 160, 20));

        jchattingwith.setFont(new java.awt.Font("굴림", 1, 18)); // NOI18N
        jchattingwith.setForeground(new java.awt.Color(255, 255, 255));
        getContentPane().add(jchattingwith, new org.netbeans.lib.awtextra.AbsoluteConstraints(338, 31, 490, 20));

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/falconmain.png"))); // NOI18N
        getContentPane().add(background, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
    int currentUserIndex;
    String currentUsername;
    
    private void jList1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MousePressed
        currentUserIndex = jList1.getSelectedIndex();
        currentUsername = (String) friendsModel.getElementAt(currentUserIndex);
        jchattingwith.setText(currentUsername);
        loaddatafromcertainuser(currentUsername);
    }//GEN-LAST:event_jList1MousePressed

    private void jSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSendActionPerformed
        try{
            if(jTextField1.getText().equals(""))
            {
                JOptionPane.showMessageDialog(null, "Please type in message.");
            }
            else
            {
                String msgout="";
                msgout= "C#"+username+"#"+currentUsername+"#"+jTextField1.getText();
                bw.write(msgout);
                bw.newLine();
                bw.flush();
                System.out.println(msgout);
                jTextArea1.append("\n"+username+":\t"+jTextField1.getText());
                messages.add(msgout);
                savedatafromcertainuser();
                jTextField1.setText("");
            }
        }catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_jSendActionPerformed

    private void jLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLogoutActionPerformed
        try {
            String logoutMessage = "LO#"+username;
            bw.write(logoutMessage);
            bw.newLine();
            bw.flush();
            System.out.println(logoutMessage);
        } catch(Exception e) {
            System.out.println(e);
        } finally {
            try {
                if (s != null && !s.isClosed()) {
                    s.close();
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.exit(0);
        }
    }//GEN-LAST:event_jLogoutActionPerformed

    private void jOpenContactFormActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenContactFormActionPerformed
        Contact_Form cf = new Contact_Form(username);
        cf.setVisible(true);
    }//GEN-LAST:event_jOpenContactFormActionPerformed
    public static void loaddatafromcertainuser(String certainUser)
    {
        jTextArea1.setText("");
        for (int i = 0; i < messages.size(); ++i) {
            String message = messages.get(i);
            String[] arguments = message.split("#");
            if(arguments[0].equals("C"))
            {
                if (arguments[1].equals(certainUser) || arguments[2].equals(certainUser)) 
                {
                    jTextArea1.append("\n" + arguments[1] + ":\t" + arguments[3]);
                }
            }
        }
    }
    public static void savedatafromcertainuser()
    {
        try
        {
            FileOutputStream f = new FileOutputStream("db/chat_" + username);
            ObjectOutputStream o = new ObjectOutputStream(f);
            o.writeObject(messages);
            o.close();
            f.close();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
       
    public void start() {
        try
        {
            Contact_Form cf = new Contact_Form(username);
            jUsername.setText(username);
            System.out.println("portnumber: " + portnumber);
            s = new Socket("localhost", portnumber);
            System.out.println(s);
            br = new BufferedReader(new InputStreamReader(s.getInputStream()));
            bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream()));
            new Thread(new Runnable() {
                public void run() {
                    while (!s.isClosed()) {
                            try {
                            String line = br.readLine();
                            messages.add(line);
                            System.out.println("server Input: " + line);
                            String[] arguments = line.split("#");
                            if (arguments[0].equals("C"))
                            {
                                if(cf.findUser(arguments[1]) == false)
                                {
                                    cf.AddUser(arguments[1]);
                                }
                                else if (arguments[1].equals(currentUsername)) 
                                {
                                    jTextArea1.append("\n" + arguments[1]+":\t"+arguments[3]);
                                }
                                savedatafromcertainuser();           
                            }
                            else if (arguments[0].equals("CF") && arguments[1].equals(username))
                            {
                                JOptionPane.showMessageDialog(null, "This user doesn't exist.");
                                jTextArea1.setText("");
                                cf.DeleteUser(arguments[2]);
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    System.exit(0);
                }
            }).start();
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e, "InfoBox: ERROR", JOptionPane.INFORMATION_MESSAGE);
            e.printStackTrace();
            try {
                if (s != null && !s.isClosed()) {
                    s.close();
                    System.out.println("[client] chat socket closing!");
                }   
            } catch (IOException ee) {
                ee.printStackTrace();
            }
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel background;
    private javax.swing.JLabel jFriend;
    public static javax.swing.JList<String> jList1;
    private javax.swing.JButton jLogout;
    private javax.swing.JButton jOpenContactForm;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton jSend;
    private static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel jUsername;
    private javax.swing.JLabel jchattingwith;
    // End of variables declaration//GEN-END:variables
}
